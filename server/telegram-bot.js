const TelegramBot = require('node-telegram-bot-api');
const ExcelJS = require('exceljs');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

class TelegramBotService {
  constructor() {
    this.bot = null;
    this.adminChatId = process.env.ADMIN_CHAT_ID;
    
    if (process.env.TELEGRAM_BOT_TOKEN) {
      this.initializeBot();
    }
  }

  initializeBot() {
    try {
      this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });
      console.log('Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞:', error);
    }
  }

  async sendSurveyResults(surveyData) {
    if (!this.bot || !this.adminChatId) {
      console.log('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ADMIN_CHAT_ID');
      return;
    }

    try {
      // –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
      const workbook = new ExcelJS.Workbook();
      const worksheet = workbook.addWorksheet('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞');

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      worksheet.columns = [
        { header: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', key: 'user_name', width: 20 },
        { header: '–ü—Ä–æ–µ–∫—Ç', key: 'project_name', width: 25 },
        { header: '–í–æ–ø—Ä–æ—Å', key: 'question_text', width: 50 },
        { header: '–û—Ü–µ–Ω–∫–∞', key: 'rating', width: 10 },
        { header: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', key: 'comment', width: 30 },
        { header: '–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞', key: 'total_score', width: 15 },
        { header: '–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', key: 'completed_at', width: 20 }
      ];

      // –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      worksheet.getRow(1).font = { bold: true };
      worksheet.getRow(1).fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FFE0E0E0' }
      };

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      const groupedData = this.groupSurveyData(surveyData);

      let rowNumber = 2;
      for (const userData of groupedData) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        worksheet.addRow({
          user_name: userData.user_name,
          project_name: userData.project_name,
          question_text: '–û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø',
          rating: '',
          comment: '',
          total_score: userData.total_score,
          completed_at: userData.completed_at
        });

        // –í—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        worksheet.getRow(rowNumber).font = { bold: true };
        worksheet.getRow(rowNumber).fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FFF0F8FF' }
        };
        rowNumber++;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        for (const response of userData.responses) {
          worksheet.addRow({
            user_name: '',
            project_name: '',
            question_text: response.question_text,
            rating: response.rating,
            comment: response.comment || '',
            total_score: '',
            completed_at: ''
          });
          rowNumber++;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        worksheet.addRow({});
        rowNumber++;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      const fileName = `survey_results_${new Date().toISOString().split('T')[0]}.xlsx`;
      const filePath = path.join(__dirname, 'temp', fileName);
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      if (!fs.existsSync(path.join(__dirname, 'temp'))) {
        fs.mkdirSync(path.join(__dirname, 'temp'));
      }

      await workbook.xlsx.writeFile(filePath);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
      await this.bot.sendDocument(this.adminChatId, filePath, {
        caption: `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤\n\nüìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${groupedData.length}\n\n–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏.`
      });

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.unlinkSync(filePath);

      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Telegram:', error);
    }
  }

  groupSurveyData(surveyData) {
    const grouped = {};
    
    surveyData.forEach(item => {
      const key = `${item.user_name}_${item.project_name}_${item.completed_at}`;
      
      if (!grouped[key]) {
        grouped[key] = {
          user_name: item.user_name,
          project_name: item.project_name,
          total_score: item.total_score,
          completed_at: item.completed_at,
          responses: []
        };
      }
      
      grouped[key].responses.push({
        question_text: item.question_text,
        rating: item.rating,
        comment: item.comment
      });
    });

    return Object.values(grouped);
  }

  async sendNotification(message) {
    if (!this.bot || !this.adminChatId) {
      console.log('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return;
    }

    try {
      await this.bot.sendMessage(this.adminChatId, message);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', error);
    }
  }
}

module.exports = new TelegramBotService();
