const sqlite3 = require('sqlite3').verbose();
const path = require('path');
require('dotenv').config();

const dbPath = process.env.DB_PATH || './database.sqlite';

class Database {
  constructor() {
    this.db = new sqlite3.Database(dbPath, (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
      } else {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      }
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  async init() {
    try {
      await this.db.exec(`
        CREATE TABLE IF NOT EXISTS users (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT NOT NULL,
          email TEXT UNIQUE NOT NULL,
          is_admin INTEGER DEFAULT 0,
          is_active INTEGER DEFAULT 1,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );

        CREATE TABLE IF NOT EXISTS projects (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT NOT NULL,
          description TEXT,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );

        CREATE TABLE IF NOT EXISTS user_projects (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          user_id INTEGER NOT NULL,
          project_id INTEGER NOT NULL,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (user_id) REFERENCES users (id),
          FOREIGN KEY (project_id) REFERENCES projects (id),
          UNIQUE(user_id, project_id)
        );

        CREATE TABLE IF NOT EXISTS questions (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          text TEXT NOT NULL,
          order_num INTEGER DEFAULT 0,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );

        CREATE TABLE IF NOT EXISTS survey_sessions (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          user_id INTEGER NOT NULL,
          project_id INTEGER NOT NULL,
          total_score REAL,
          completed_at DATETIME,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (user_id) REFERENCES users (id),
          FOREIGN KEY (project_id) REFERENCES projects (id)
        );

        CREATE TABLE IF NOT EXISTS survey_responses (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          session_id INTEGER NOT NULL,
          question_id INTEGER NOT NULL,
          rating INTEGER NOT NULL,
          comment TEXT,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (session_id) REFERENCES survey_sessions (id),
          FOREIGN KEY (question_id) REFERENCES questions (id)
        );
      `);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –º–∏–≥—Ä–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É survey_responses –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      await this.migrateSurveyResponsesTable();

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞—è
      await this.addTestData();

      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  // –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã survey_responses
  async migrateSurveyResponsesTable() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ session_id
      const tableInfo = await this.db.all("PRAGMA table_info(survey_responses)");
      const hasSessionId = tableInfo.some(col => col.name === 'session_id');
      
      if (!hasSessionId) {
        console.log('üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã survey_responses...');
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        await this.db.exec(`
          CREATE TABLE survey_responses_new (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            session_id INTEGER NOT NULL,
            question_id INTEGER NOT NULL,
            rating INTEGER NOT NULL,
            comment TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (session_id) REFERENCES survey_sessions (id),
            FOREIGN KEY (question_id) REFERENCES questions (id)
          )
        `);
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
        await this.db.exec(`
          DROP TABLE IF EXISTS survey_responses;
          ALTER TABLE survey_responses_new RENAME TO survey_responses;
        `);
        
        console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è survey_responses –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ survey_responses:', error);
      // –ï—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
      try {
        console.log('üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã survey_responses...');
        await this.db.exec(`
          DROP TABLE IF EXISTS survey_responses;
          CREATE TABLE survey_responses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            session_id INTEGER NOT NULL,
            question_id INTEGER NOT NULL,
            rating INTEGER NOT NULL,
            comment TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (session_id) REFERENCES survey_sessions (id),
            FOREIGN KEY (question_id) REFERENCES questions (id)
          )
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ survey_responses –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞');
      } catch (recreateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', recreateError);
      }
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  async addTestData() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
      const userCount = await this.db.get('SELECT COUNT(*) as count FROM users');
      if (userCount.count > 0) {
        console.log('üìä –î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
        return;
      }

      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const testUsers = [
        { name: '–¢–∏—Ö–æ–º–∏—Ä–æ–≤ –ù–∏–∫–∏—Ç–∞', email: 'tikhomirov@example.com', is_admin: 1 },
        { name: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω', email: 'ivanov@example.com', is_admin: 0 },
        { name: '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä', email: 'petrov@example.com', is_admin: 0 },
        { name: '–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä', email: 'sidorov@example.com', is_admin: 0 },
        { name: '–ö–æ–∑–ª–æ–≤ –ö–æ–∑–µ–ª', email: 'kozlov@example.com', is_admin: 0 },
        { name: '–í–æ–ª–∫–æ–≤ –í–æ–ª–∫', email: 'volkov@example.com', is_admin: 0 },
        { name: '–ú–µ–¥–≤–µ–¥–µ–≤ –ú–µ–¥–≤–µ–¥—å', email: 'medvedev@example.com', is_admin: 0 },
        { name: '–õ–∏—Å–∏—Ü—ã–Ω –õ–∏—Å', email: 'lisitsyn@example.com', is_admin: 0 },
        { name: '–ó–∞–π—Ü–µ–≤ –ó–∞—è—Ü', email: 'zaytsev@example.com', is_admin: 0 },
        { name: '–ë–µ–ª–æ–≤ –ë–µ–ª—ã–π', email: 'belov@example.com', is_admin: 0 },
        { name: '–ß–µ—Ä–Ω–æ–≤ –ß–µ—Ä–Ω—ã–π', email: 'chernov@example.com', is_admin: 0 },
        { name: '–ö—Ä–∞—Å–Ω–æ–≤ –ö—Ä–∞—Å–Ω—ã–π', email: 'krasnov@example.com', is_admin: 0 },
        { name: '–ñ–µ–ª—Ç–æ–≤ –ñ–µ–ª—Ç—ã–π', email: 'zheltov@example.com', is_admin: 0 },
        { name: '–°–∏–Ω—å–∫–æ–≤ –°–∏–Ω–∏–π', email: 'sinkov@example.com', is_admin: 0 },
        { name: '–ó–µ–ª–µ–Ω–æ–≤ –ó–µ–ª–µ–Ω—ã–π', email: 'zelenov@example.com', is_admin: 0 },
        { name: '–û—Ä–∞–Ω–∂–µ–≤ –û—Ä–∞–Ω–∂–µ–≤—ã–π', email: 'oranzhev@example.com', is_admin: 0 },
        { name: '–§–∏–æ–ª–µ—Ç–æ–≤ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π', email: 'fioletov@example.com', is_admin: 0 },
        { name: '–†–æ–∑–æ–≤ –†–æ–∑–æ–≤—ã–π', email: 'rozov@example.com', is_admin: 0 },
        { name: '–°–µ—Ä—ã–π –°–µ—Ä—ã–π', email: 'sery@example.com', is_admin: 0 },
        { name: '–ö–æ—Ä–∏—á–Ω–µ–≤ –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π', email: 'korichnev@example.com', is_admin: 0 },
        { name: '–ì–æ–ª—É–±–æ–≤ –ì–æ–ª—É–±–æ–π', email: 'golubov@example.com', is_admin: 0 }
      ];

      for (const user of testUsers) {
        await this.db.run(
          'INSERT INTO users (name, email, is_admin) VALUES (?, ?, ?)',
          [user.name, user.email, user.is_admin]
        );
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
      const testProjects = [
        { name: '–ü—Ä–æ–µ–∫—Ç –ê', description: '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ê' },
        { name: '–ü—Ä–æ–µ–∫—Ç –ë', description: '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ë' },
        { name: '–ü—Ä–æ–µ–∫—Ç –í', description: '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –í' },
        { name: '–ü—Ä–æ–µ–∫—Ç –ì', description: '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ì' },
        { name: '–ü—Ä–æ–µ–∫—Ç –î', description: '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –î' }
      ];

      for (const project of testProjects) {
        await this.db.run(
          'INSERT INTO projects (name, description) VALUES (?, ?)',
          [project.name, project.description]
        );
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞ question.txt
      const questions = [
        '–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–º–∞–Ω–¥–µ –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏?',
        '–ù–∞—Å–∫–æ–ª—å–∫–æ —É–¥–æ–±–Ω–æ –≤–∞–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞?',
        '–ù–∞—Å–∫–æ–ª—å–∫–æ, –Ω–∞ –≤–∞—à –≤–∑–≥–ª—è–¥, —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –∫–æ–º–∞–Ω–¥–Ω–æ–º—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é?',
        '–ù–∞—Å–∫–æ–ª—å–∫–æ, –Ω–∞ –≤–∞—à –≤–∑–≥–ª—è–¥, —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ–ª–Ω–æ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è?',
        '–ù–∞—Å–∫–æ–ª—å–∫–æ, –Ω–∞ –≤–∞—à –≤–∑–≥–ª—è–¥, —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏ (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∏, –º–µ–Ω–µ–¥–∂–µ—Ä—ã)?',
        '–ù–∞—Å–∫–æ–ª—å–∫–æ, –Ω–∞ –≤–∞—à –≤–∑–≥–ª—è–¥, —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –æ—Ç–∫—Ä—ã—Ç –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é –∏ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π?',
        '–ù–∞—Å–∫–æ–ª—å–∫–æ –≥–ª—É–±–æ–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ–Ω–∏–º–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ –µ–≥–æ –±–∏–∑–Ω–µ—Å-—Ü–µ–ª–∏?',
        '–ù–∞—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ?',
        '–ù–∞—Å–∫–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ (–æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã, —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ç. –¥.)?',
        '–ù–∞—Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞?',
        '–ù–∞—Å–∫–æ–ª—å–∫–æ, –Ω–∞ –≤–∞—à –≤–∑–≥–ª—è–¥, —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –≤–æ–≤–ª–µ—á–µ–Ω –≤ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º?',
        '–ù–∞—Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–Ω–∏–∂–∞–µ—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ —Ä–∏—Å–∫–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ?',
        '–û—Ü–µ–Ω–∏—Ç–µ –≤ —Ü–µ–ª–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ?'
      ];

      for (let i = 0; i < questions.length; i++) {
        await this.db.run(
          'INSERT INTO questions (text, order_num) VALUES (?, ?)',
          [questions[i], i + 1]
        );
      }

      // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã
      const assignments = [
        { userId: 1, projectId: 1 },
        { userId: 1, projectId: 2 },
        { userId: 2, projectId: 1 },
        { userId: 3, projectId: 2 },
        { userId: 4, projectId: 3 },
        { userId: 5, projectId: 4 },
        { userId: 6, projectId: 5 },
        { userId: 7, projectId: 1 },
        { userId: 8, projectId: 2 },
        { userId: 9, projectId: 3 },
        { userId: 10, projectId: 4 },
        { userId: 11, projectId: 5 },
        { userId: 12, projectId: 1 },
        { userId: 13, projectId: 2 },
        { userId: 14, projectId: 3 },
        { userId: 15, projectId: 4 },
        { userId: 16, projectId: 5 },
        { userId: 17, projectId: 1 },
        { userId: 18, projectId: 2 },
        { userId: 19, projectId: 3 },
        { userId: 20, projectId: 4 },
        { userId: 21, projectId: 5 }
      ];

      for (const assignment of assignments) {
        try {
          await this.db.run(
            'INSERT INTO user_projects (user_id, project_id) VALUES (?, ?)',
            [assignment.userId, assignment.projectId]
          );
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        }
      }

      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  async getUsers() {
    return new Promise((resolve, reject) => {
      this.db.all('SELECT * FROM users ORDER BY created_at DESC', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
  }

  async getUserById(id) {
    return new Promise((resolve, reject) => {
      this.db.get('SELECT * FROM users WHERE id = ?', [id], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });
  }

  async createUser(userData) {
    return new Promise((resolve, reject) => {
      const { name, email, is_admin = 0 } = userData;
      this.db.run(
        'INSERT INTO users (name, email, is_admin) VALUES (?, ?, ?)',
        [name, email, is_admin],
        function(err) {
          if (err) reject(err);
          else resolve({ id: this.lastID, ...userData });
        }
      );
    });
  }

  async updateUser(id, userData) {
    return new Promise((resolve, reject) => {
      const { name, email, is_active, is_admin } = userData;
      this.db.run(
        'UPDATE users SET name = ?, email = ?, is_active = ?, is_admin = ? WHERE id = ?',
        [name, email, is_active, is_admin, id],
        function(err) {
          if (err) reject(err);
          else resolve({ id, ...userData });
        }
      );
    });
  }

  // –ü—Ä–æ–µ–∫—Ç—ã
  async getProjects() {
    return new Promise((resolve, reject) => {
      this.db.all('SELECT * FROM projects ORDER BY name', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
  }

  async createProject(projectData) {
    return new Promise((resolve, reject) => {
      const { name, description } = projectData;
      this.db.run(
        'INSERT INTO projects (name, description) VALUES (?, ?)',
        [name, description],
        function(err) {
          if (err) reject(err);
          else resolve({ id: this.lastID, ...projectData });
        }
      );
    });
  }

  // –í–æ–ø—Ä–æ—Å—ã
  async getQuestions() {
    return new Promise((resolve, reject) => {
      this.db.all('SELECT * FROM questions ORDER BY order_num', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
  }

  // –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –ø—Ä–æ–µ–∫—Ç–∞–º
  async getUserProjects(userId) {
    return new Promise((resolve, reject) => {
      this.db.all(`
        SELECT p.* FROM projects p
        INNER JOIN user_projects up ON p.id = up.project_id
        WHERE up.user_id = ? AND p.is_active = 1
        ORDER BY p.name
      `, [userId], (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
  }

  async assignUserToProject(userId, projectId) {
    return new Promise((resolve, reject) => {
      this.db.run(
        'INSERT OR IGNORE INTO user_projects (user_id, project_id) VALUES (?, ?)',
        [userId, projectId],
        function(err) {
          if (err) reject(err);
          else resolve({ userId, projectId });
        }
      );
    });
  }

  async removeUserFromProject(userId, projectId) {
    return new Promise((resolve, reject) => {
      this.db.run(
        'DELETE FROM user_projects WHERE user_id = ? AND project_id = ?',
        [userId, projectId],
        function(err) {
          if (err) reject(err);
          else resolve({ userId, projectId });
        }
      );
    });
  }

  // –°–µ—Å—Å–∏–∏ –æ–ø—Ä–æ—Å–æ–≤
  async createSurveySession(userId, projectId) {
    return new Promise((resolve, reject) => {
      this.db.run(
        'INSERT INTO survey_sessions (user_id, project_id) VALUES (?, ?)',
        [userId, projectId],
        function(err) {
          if (err) reject(err);
          else resolve({ id: this.lastID, userId, projectId });
        }
      );
    });
  }

  async completeSurveySession(sessionId, totalScore) {
    return new Promise((resolve, reject) => {
      this.db.run(
        'UPDATE survey_sessions SET total_score = ?, completed_at = CURRENT_TIMESTAMP WHERE id = ?',
        [totalScore, sessionId],
        function(err) {
          if (err) reject(err);
          else resolve({ sessionId, totalScore });
        }
      );
    });
  }

  // –û—Ç–≤–µ—Ç—ã –Ω–∞ –æ–ø—Ä–æ—Å—ã
  async saveSurveyResponse(sessionId, questionId, rating, comment = null) {
    return new Promise((resolve, reject) => {
      this.db.run(
        'INSERT INTO survey_responses (session_id, question_id, rating, comment) VALUES (?, ?, ?, ?)',
        [sessionId, questionId, rating, comment],
        function(err) {
          if (err) reject(err);
          else resolve({ id: this.lastID, questionId, rating, comment });
        }
      );
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–æ–≤
  async getSurveyResults() {
    return new Promise((resolve, reject) => {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
      this.db.all("PRAGMA table_info(survey_responses)", (err, columns) => {
        if (err) {
          reject(err);
          return;
        }
        
        const hasSessionId = columns.some(col => col.name === 'session_id');
        
        if (hasSessionId) {
          // –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
          this.db.all(`
            SELECT 
              u.name as user_name,
              p.name as project_name,
              q.text as question_text,
              sr.rating,
              sr.comment,
              ss.total_score,
              ss.completed_at
            FROM survey_responses sr
            INNER JOIN survey_sessions ss ON sr.session_id = ss.id
            INNER JOIN users u ON ss.user_id = u.id
            INNER JOIN projects p ON ss.project_id = p.id
            INNER JOIN questions q ON sr.question_id = q.id
            WHERE ss.completed_at IS NOT NULL
            ORDER BY ss.completed_at DESC, u.name, q.order_num
          `, (err, rows) => {
            if (err) reject(err);
            else resolve(rows);
          });
        } else {
          // –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
          this.db.all(`
            SELECT 
              u.name as user_name,
              p.name as project_name,
              q.text as question_text,
              sr.rating,
              sr.comment,
              ss.total_score,
              ss.completed_at
            FROM survey_responses sr
            INNER JOIN users u ON sr.user_id = u.id
            INNER JOIN projects p ON sr.project_id = p.id
            INNER JOIN questions q ON sr.question_id = q.id
            INNER JOIN survey_sessions ss ON sr.user_id = ss.user_id AND sr.project_id = ss.project_id
            WHERE ss.completed_at IS NOT NULL
            ORDER BY ss.completed_at DESC, u.name, q.order_num
          `, (err, rows) => {
            if (err) {
              // –ï—Å–ª–∏ –∏ —Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
              console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
              resolve([]);
            } else {
              resolve(rows);
            }
          });
        }
      });
    });
  }

  async getSurveyResultsByUser(userId) {
    return new Promise((resolve, reject) => {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
      this.db.all("PRAGMA table_info(survey_responses)", (err, columns) => {
        if (err) {
          reject(err);
          return;
        }
        
        const hasSessionId = columns.some(col => col.name === 'session_id');
        
        if (hasSessionId) {
          // –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
          this.db.all(`
            SELECT 
              p.name as project_name,
              q.text as question_text,
              sr.rating,
              sr.comment,
              ss.total_score,
              ss.completed_at
            FROM survey_responses sr
            INNER JOIN survey_sessions ss ON sr.session_id = ss.id
            INNER JOIN projects p ON ss.project_id = p.id
            INNER JOIN questions q ON sr.question_id = q.id
            WHERE ss.user_id = ? AND ss.completed_at IS NOT NULL
            ORDER BY ss.completed_at DESC, q.order_num
          `, [userId], (err, rows) => {
            if (err) reject(err);
            else resolve(rows);
          });
        } else {
          // –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
          this.db.all(`
            SELECT 
              p.name as project_name,
              q.text as question_text,
              sr.rating,
              sr.comment,
              ss.total_score,
              ss.completed_at
            FROM survey_responses sr
            INNER JOIN projects p ON sr.project_id = p.id
            INNER JOIN questions q ON sr.question_id = q.id
            INNER JOIN survey_sessions ss ON sr.user_id = ss.user_id AND sr.project_id = ss.project_id
            WHERE sr.user_id = ? AND ss.completed_at IS NOT NULL
            ORDER BY ss.completed_at DESC, q.order_num
          `, [userId], (err, rows) => {
            if (err) {
              // –ï—Å–ª–∏ –∏ —Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
              console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
              resolve([]);
            } else {
              resolve(rows);
            }
          });
        }
      });
    });
  }

  close() {
    this.db.close((err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
      } else {
        console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.');
      }
    });
  }
}

module.exports = new Database();
